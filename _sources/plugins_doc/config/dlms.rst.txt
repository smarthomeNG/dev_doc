.. |_| unicode:: 0xA0


===========================
Plugin 'dlms' Konfiguration
===========================


.. index:: Plugins; dlms Konfiguration

.. image:: /plugins/dlms/webif/static/img/plugin_logo.png
   :alt: plugin logo
   :width: 300px
   :height: 300px
   :scale: 50 %
   :align: left

.. |br| raw:: html

   <br />

Im folgenden sind etwaige Anforderungen und unterstützte Hardware beschrieben. Danach folgt die               Beschreibung, wie das Plugin **dlms** konfiguriert wird. Außerdem ist im folgenden               beschrieben, wie das Plugin in den Item Definitionen genutzt werden kann. [#f1]_ 

Es handelt sich bei diesem Plugin um ein **gateway Plugin**.



Beschreibung
============

Unterstützung für Smartmeter, die DLMS (Device Language Message Specification, IEC 62056-21) nutzen und OBIS Codes liefern


Anforderungen
=============




 - Minimum SmartHomeNG Version: **1.8**
 - Minimum Python Version: **3.6**

Konfiguration
=============


Im folgenden ist beschrieben, wie das Plugin **dlms** konfiguriert wird. Außerdem ist im folgenden beschrieben, wie das Plugin in den Item Definitionen genutzt werden kann.


=========
Parameter
=========


Das Plugin verfügt über folgende Parameter, die in der Datei ``../etc/plugin.yaml`` konfiguriert werden:


baudrate
========


Baudrate bei der die Kommunikation erfolgen soll

 - Datentyp: **int**
 - Standardwert: **300**

 - Minimalwert: **50**

baudrate_fix
============


Baudrate beibehalten trotz Änderungsanforderung

 - Datentyp: **bool**
 - Standardwert: **False**


device_address
==============


Interne Unteradresse des Smartmeters

 - Datentyp: **str**


no_waiting
==========


derzeit nicht genutzt

 - Datentyp: **bool**
 - Standardwert: **False**


only_listen
===========


Manche Smartmeter können nicht abgefragt werden sondern senden von sich aus Informationen. Für diese Smartmeter auf True setzen und die Baudrate anpassen

 - Datentyp: **bool**
 - Standardwert: **False**


querycode
=========


Abfragecode für den Smartmeter, default ist `?`, einige Smartmeter akzeptieren z.B. `2`

 - Datentyp: **str**
 - Standardwert: **?**


reset_baudrate
==============


derzeit nicht genutzt

 - Datentyp: **bool**
 - Standardwert: **True**


serialport
==========


Serieller Port an dem der Smartmeter angeschlossen ist

 - Datentyp: **str**


timeout
=======


Timeout in Sekunden nach dem der Lesevorgang automatisch beendet wird

 - Datentyp: **int**
 - Standardwert: **2**


update_crontab
==============


Abfragen des Smartmeters mit Festlegung via Crontab

 - Datentyp: **str**


update_cycle
============


Zeitlicher Abstand zwischen zwei Abfragen des Smartmeters in Sekunden, setzen auf 0 schaltet cycle aus

 - Datentyp: **int**
 - Standardwert: **60**

 - Minimalwert: **0**

update_cycle_start_offset
=========================


Zeit die beim Start des Plugins zusätzlich gewartet wird, damit sich verschiedene Instanzen die gleiche Schnittstellen abfragen nicht in die Quere kommen

 - Datentyp: **int**
 - Standardwert: **0**

 - Minimalwert: **0**

use_checksum
============


Wenn wahr, wird eine Prüfsumme über die ausgelesenen Daten gebildet

 - Datentyp: **bool**
 - Standardwert: **True**


==============
Item Attribute
==============


Das Plugin unterstützt folgende Item Attribute, die in den Dateien im Verzeichnis  ``../items`` verwendet werden:


dlms_obis_code
==============


Anweisung welcher Teil einer OBIS Zeile geparst und dem Item zugewiesen werden soll * obis Code ``1-1:1.6.2*01`` * Index * Entweder Wert also 'Value' oder Einheit also 'Unit' * Wert Konvertierungsart      * Z6 (Zeit codiert mit hhmmss),      * Z4 (Zeit codiert mit hhmm),      * D6 (Datum codiert mit YYMMDD),      * ZST10 (Datum und Zeit codiert mit YYMMDDhhmm),      * ZST12 (Datum und Zeit codiert mit YYMMDDhhmmss),      * str eine Zeichenkette      * float eine Fliesskommazahl      * int ein ganze Zahl      * num Numerisch, entweder Ganzzahl oder Fliesskommazahl

 - Datentyp: **list(4,str,int,str,str)**


dlms_obis_readout
=================


In Items mit diesem Attribut wird der komplette Auslesepuffer abgelegt für eigene Untersuchungen

 - Datentyp: **str**


===============
Logik Parameter
===============


Das Plugin verfügt über folgende Parameter, die in der Datei ``../etc/logic.yaml`` konfiguriert werden:

Keine Logik Parameter in den Metadaten beschrieben - **Bitte in der README nachsehen** (siehe Fußnote)

================
Plugin Functions
================


Das Plugin verfügt über folgende öffentliche Funktionen, die z.B. in Logiken aufgerufen werden können.

**Keine**

.. [#f1] Diese Seite wurde aus den Metadaten des Plugins erzeugt. Für den Fall, dass diese Seite nicht alle benötigten Informationen enthält, bitte auf die englischsprachige :doc:`README Datei <../../plugins/dlms/README>` des Plugins zugreifen.
